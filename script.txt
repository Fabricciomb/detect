import os
import time
import random
import RPi.GPIO as GPIO

# Configuração do GPIO
PIR_PIN = 7  # Altere para o pino onde o sensor está conectado no modo BOARD
AUDIO_FOLDER = "/home/fabra/Desktop/audios"  # Pasta com arquivos de áudio

GPIO.setmode(GPIO.BOARD)
GPIO.setup(PIR_PIN, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

def play_random_audio():
    """Função para tocar um áudio aleatório da pasta especificada"""
    audio_files = [f for f in os.listdir(AUDIO_FOLDER) if f.endswith('.mp3') or f.endswith('.wav')]
    if audio_files:
        audio_file = random.choice(audio_files)
        audio_path = os.path.join(AUDIO_FOLDER, audio_file)
        os.system(f'cvlc --play-and-exit "{audio_path}"')

def test_sensor():
    """Função para verificar se o sensor PIR está conectado e funcionando"""
    print("Testando o sensor PIR...")
    initial_state = GPIO.input(PIR_PIN)
    print("Aguardando detecção de mudança de estado no sensor...")
    start_time = time.time()
    
    # Aguarda mudança de estado ou timeout de 10 segundos
    while time.time() - start_time < 10:
        if GPIO.input(PIR_PIN) != initial_state:
            print("Sensor PIR funcionando corretamente.")
            return True
        time.sleep(0.1)
    
    print("Erro: Sensor PIR não respondeu como esperado.")
    return False

try:
    # Testa o sensor antes de iniciar a detecção contínua
    if test_sensor():
        print("Iniciando o sistema de detecção de movimento...")
        time.sleep(2)  # Espera para estabilizar o sensor
        
        while True:
            # Verifica se o sensor detecta movimento
            if GPIO.input(PIR_PIN):
                print("Movimento detectado! Tocando áudio...")
                play_random_audio()
                time.sleep(30)  # Aguarda 30 segundos antes de verificar novamente
            else:
                time.sleep(0.5)  # Atraso para evitar verificações muito frequentes

    else:
        print("Por favor, verifique o sensor PIR e as conexões.")

except KeyboardInterrupt:
    print("Sistema interrompido pelo usuário.")

finally:
    GPIO.cleanup()
    print("GPIO limpo e script finalizado.")
